# This is an example configuration for FluidFS
# Modify to your local settings, rename and place in one of the following:
#
#   - /etc/fluidfs/config.yml
#   - ~/.fluidfs/config.yml
#   - $(pwd)/fluidfs.yml
#
# Note is preferable to store configurations in ~/.fluidfs/config.yml

# Randomness is an important part of distributed operation, used to select
# precedence or to create election timeouts. To control the pseudo-random
# number generation, you may set a seed, but leave commented out to use a
# seed value that is based on the timestamp of initialization.
# seed: 42

# The replica name (must be unique), usually the hostname of the device.
# Note if Name is null it will be set to the hostname of the device.
# name: null

# The path to the hosts file that configures the replica network. If null or
# omitted, the hosts file will be created at ~/.fluid/hosts and will be loaded
# with the localhost's IP address and information. This isn't a very
# interesting network, but the hosts will be populated if it receives
# communication from any other replica, meaning that hosts only has to be
# defined on at least one replica.
# hosts: null

# The path to the fstab file that configures mount points. If null or omitted,
# the fstab file will be created at ~/.fluid/fstab. The fstab file can be
# modified by both the application and the user, but with care.
# fstab: null

# The delay in milliseconds to flush the metadata in the file system. If null
# or omitted the default flush delay is 750 milliseconds.
# flush_delay: 750

# The delay in milliseconds between pair-wise anti-entropy sessions for blob
# replication. If null or omitted the default anti-entropy delay is 1250ms.
# anti_entropy_delay: 1250

# Configuration for application logging
logging:

    # The log level can be one of DEBUG, INFO, WARN, ERROR or FATAL
    level: INFO

    # Specify a path to log to a file, if null or empty will log to stdout
    # path: null

# Configuration for the state cache database
database:

    # The driver for the database, either boltdb (default) or leveldb
    driver: boltdb

    # The path to the database file on disk. If null or omitted, the database
    # will be created in the user home directory at ~/.fluid/cache.bdb
    # path: null

# Configuration for blob storage and chunking
storage:

    # The path on disk to store data blobs. If null or omitted, the storage
    # directory will be created in the user home directory at ~/.fluid/data/
    # Note that this path will be created if it doesn't exist and that the user
    # must have access permissions to it or the FluidFS daemon will not start.
    # path: null

    # Select either variable (default) or fixed length chunking
    chunking: variable

    # Set the block size in bytes. This is the target block size for variable
    # length chunking and the size of all chunks (except possibly the last)
    # for fixed length chunking.
    block_size: 4096

    # Set the minimum block size in bytes. This is used in both variable and
    # fixed length chunking. In fixed length chunking it determines whether or
    # the last block is greater than or small than the block_size.
    min_block_size: 2048

    # Set the maximal blcok size in bytes. This is only used in variable
    # length chunking to bound the size of the rolling window. If using fixed
    # length chunking, set this equal to the block size.
    max_block_size: 8192

    # Specify the hashing algorithm to use. This algorithm determines how
    # chunks are uniquely identified by their signature. Different hashing
    # algorithms have different opportunities for security, performance, and
    # collision avoidance. The default is sha256. Current options for hashing
    # include:  md5, sha1, sha224, sha256, and murmur.
    # Future algorithms to include are: CityHash, FarmHash, and SipHash.
    hashing: sha256

# Configuration for security and certificates
security:

    # If the insecure flag is set to true, no transport layer security will be
    # used in replica to replica RPC communications. By default this is false.
    insecure: false

    # If the verify_client flag is set to true, a certificate authority will
    # be used to implement mutual tls between replicas so that clients as well
    # as servers must authenticate with their keys. By default his is true.
    verify_client: true

    # The location on disk of the replica's private key for TLS encrypted
    # communication. If null or omitted, and with insecure set to false, the
    # server will look for the key at ~/.fluidfs/replica.key. If insecure is
    # set to false and the key is required to exist and be readable. The path
    # to the key can also be set in the environment as $FLUIDFS_KEY_FILE.
    # key: null

    # The location on disk of the replica's public certificate for TLS
    # encrypted communication. If null or omitted, the server will look for
    # the cert at ~/.fluidfs/replica.cert. If insecure is set to false, the
    # cert is required to exist and be readable. The path to the key can also
    # be set in the environment as $FLUIDFS_CERT_FILE.
    #
    # NOTE: unless otherwise specified in the hosts file, this cert will be
    # used by default to connect to other replicas in server-side TLS mode
    # e.g. if both insecure and verify_client is set to false.
    # cert: null

    # The location on disk of the fluidfs certificate authority that was used
    # to sign all public key certificates for each replica. If null or omitted
    # the server will look for the ca at ~/.fluidfs/ca.crt. If verify_client
    # is set to true, the ca is required to exist and be readable. The path to
    # the ca can also be set in the environment as $FLUIDFS_CA_FILE.
    # ca: null
