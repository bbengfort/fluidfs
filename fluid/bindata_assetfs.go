// Code generated by go-bindata.
// sources:
// assets/index.html
// DO NOT EDIT!

package fluid

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHTML = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x5d\x57\xe2\x3c\x17\xbd\xf7\x57\x64\x72\x3b\xb6\x01\xc4\x51\xdf\xd5\xb2\x96\x03\x7e\xe0\x07\x82\x20\xfa\x72\x17\xd2\x53\x1a\x48\x93\x92\xa4\x2d\x3c\xbf\xfe\x59\xa5\x20\x45\x1d\xd7\x33\x57\x24\x39\x27\xfb\x9c\x5d\xf6\x3e\xf1\x7e\x04\x8a\xd9\x75\x02\x28\xb2\xb1\x68\x1d\x79\xc5\x0f\x62\x82\x1a\xe3\x63\xa9\x9c\xb9\xc1\x48\x50\x39\xf3\x31\x6e\x1d\x21\xe4\x45\x40\x83\x62\x81\x90\x17\x83\xa5\x88\x45\x54\x1b\xb0\x3e\x4e\x6d\xe8\x9c\xe3\x6a\x28\xb2\x36\x71\x60\x99\xf2\xcc\xc7\x6f\xce\xcb\xa5\xd3\x56\x71\x42\x2d\x9f\x0a\xc0\x88\x29\x69\x41\x5a\x1f\x77\xaf\x7c\x08\x66\x70\x70\x53\xd2\x18\x7c\x4c\x53\x1b\x29\x5d\x49\xbd\x16\x29\x0f\xae\x87\x5f\xa4\x2e\x60\x9d\x2b\x1d\x98\x4a\x72\x58\x24\x87\xe6\x18\x85\x5c\x00\x32\x6b\x63\x21\x3e\x46\x1a\x12\xc1\x19\x3d\x46\x01\x37\x56\xf3\x69\x6a\x21\xd8\x06\xcd\x31\x4a\xe3\xe0\x0b\xf0\x00\x0c\xd3\x3c\xb1\x5c\xc9\x0a\xfe\x28\x02\x94\xc3\x14\x71\x69\x41\x87\x94\x01\xb2\x0a\xd9\x08\x90\x50\x8c\x0a\xb4\xed\x75\x57\xd0\xfd\x02\x37\xe3\x90\x27\x4a\xdb\x0a\x68\xce\x03\x1b\xf9\x01\x64\x9c\x81\xb3\xd9\x1c\x23\x2e\xb9\xe5\x54\x38\x86\x51\x01\x7e\x1d\xb7\x8e\x4a\x24\xcb\xad\x80\xd6\xb6\x8e\x47\xca\xed\x36\xf6\xc3\x71\xd0\x30\x52\xda\xb2\xd4\xa2\x2e\x53\xd2\x20\xc7\x69\xed\x63\x9e\xe0\x72\x81\x34\x08\x1f\x9b\x5d\x1a\x67\x05\xbf\x48\x43\xe8\x63\x42\x8d\x01\x6b\x08\x8f\x67\x24\xa4\x59\x11\x72\x39\x53\xb8\xb5\x81\xd9\xe3\xb4\x3b\x3d\xd4\x1e\x0e\xd1\x35\x17\x50\x29\xb1\x41\x2f\x91\x0a\x11\x98\xff\x11\x12\xd3\x15\x0b\xa4\x3b\x55\xca\x1a\xab\x69\x52\x6c\x98\x8a\xc9\xe6\x20\xa7\x96\x45\xe4\xc4\x3d\x71\xcf\x88\xe1\x71\x22\x60\x45\xde\x33\xdd\x98\x4b\x97\x19\x83\xb7\xfd\xda\xb5\x00\x13\x01\x58\xbc\xf9\xf6\x33\xcd\xed\xba\xa0\x41\x4f\xce\x9b\x4e\xbb\xf6\x76\xba\xcc\xeb\x1d\xb1\x80\x71\xed\xb9\x93\xca\x28\xe6\x4d\xf6\xf2\xfb\x65\xd1\xef\x8c\xb2\x97\xe5\x3f\x57\x82\xf5\x5e\xe3\x7a\xaf\xdb\x18\x35\x17\xe7\xf6\xfe\x71\xf2\x33\x7f\xee\x0f\x9e\xa2\x49\x38\xbc\xbb\xe8\x61\xc4\xb4\x32\x46\x69\x3e\xe3\xd2\xc7\x54\x2a\xb9\x8e\x55\x6a\xf0\xdf\x33\x0b\x95\xb4\x0e\xcd\xc1\xa8\x18\x48\xd3\x3d\x73\x6b\x84\x19\x73\x70\xfc\x57\xd4\xf2\x2c\x7c\x4b\x96\xc9\x64\x32\x1e\xdc\xdc\xff\x1a\x5d\x46\xa7\xfd\xb1\xb8\x79\x0a\x07\xbd\xdb\xa1\xea\x34\x56\xd3\xab\x9f\x83\x45\x7f\xd5\xbe\xbc\x16\xbd\x2b\xc8\xd4\xd5\xed\xc9\x50\xd4\x0c\x9f\x8e\xd9\xd3\x60\x2c\xbf\xa3\xb6\xff\x43\x1f\x36\xe2\x1d\xbe\x37\x82\x2e\x37\x42\xf8\xb3\x7a\x2a\x2d\x1f\x4a\xa7\xe0\x5a\xf8\x66\xaa\x36\x0c\x5b\x5b\x08\x8f\xec\x26\x88\x37\x55\xc1\x7a\x57\x3b\xe0\xd9\x6e\xe8\x14\x66\xa0\x5c\x82\xde\x7e\xf3\xc3\xa8\x56\xf9\xfb\xf9\xc7\x7b\xc2\x31\xb1\x53\x6f\x54\xe2\xc5\xc0\xaa\xef\x3d\x12\xd5\x0f\x42\x49\xeb\xb3\x89\xb9\x41\xc6\x72\x21\x50\x2a\x03\xd0\x85\x33\x8d\xd5\x29\x2b\xcc\xef\x7a\x24\xa9\x94\x26\x01\xcf\xde\x3b\xdc\x6f\xb6\xcb\x43\x8f\xdc\x7d\xb2\x48\x39\x52\x90\xd1\x6c\xaf\x24\xa6\x02\x70\xe7\xcb\x14\xf4\x7a\xa3\xa0\x72\xe9\x34\xdc\x86\xdb\xdc\x48\xa5\x18\xc6\x87\xc2\x68\x9c\xfe\x72\x7e\x4f\xa3\x40\x64\x83\x90\xac\x46\xff\xbf\x98\xcd\x69\xad\xb3\x3c\xb9\xe5\xf9\xe0\xfa\xfc\x81\xb6\x9f\x47\x6f\xab\xc9\xfd\x73\x6a\x41\x8c\x9a\x4d\xff\xcf\x22\xf0\x48\xd9\xd2\x37\xfd\x7d\xeb\xe1\xe2\x60\x6b\xe1\xb9\xf9\xe0\xde\xcf\x7d\x17\x82\x1e\xb1\xd3\xee\x80\x4f\x6b\x8d\xb3\x65\xb6\x9e\x0f\x1f\xc3\xdb\xf9\xd3\x23\x7d\x58\x84\xe9\xeb\x78\x35\x59\xbd\xf4\x65\xfb\xee\xf2\x4c\x34\xe2\xf6\x6b\xaf\x9b\xdc\x5c\xc4\x37\xed\xce\x79\x7e\xd3\xeb\xb2\x7e\xe7\x6c\xb4\xa2\xff\x85\xcb\x47\x65\xdf\xd1\x8c\x0e\x4b\x6a\x5f\x2a\xbb\x4a\x7b\xa7\xe4\xf9\xbb\x90\x0b\x1e\xc5\x5b\xe9\x63\x0b\x2b\x4b\xe6\x34\xa3\xe5\x85\x4a\xc9\xdd\x84\xf4\x48\xa9\x6f\x8f\x94\x0f\xeb\xbf\x01\x00\x00\xff\xff\x51\x9c\x66\x2c\x69\x07\x00\x00")

func assetsIndexHTMLBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHTML,
		"assets/index.html",
	)
}

func assetsIndexHTML() (*asset, error) {
	bytes, err := assetsIndexHTMLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 1897, mode: os.FileMode(420), modTime: time.Unix(1483726027, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHTML,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHTML, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
