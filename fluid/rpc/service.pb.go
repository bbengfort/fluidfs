// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for InterReplica service

type InterReplicaClient interface {
	PushHandler(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error)
}

type interReplicaClient struct {
	cc *grpc.ClientConn
}

func NewInterReplicaClient(cc *grpc.ClientConn) InterReplicaClient {
	return &interReplicaClient{cc}
}

func (c *interReplicaClient) PushHandler(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error) {
	out := new(PushReply)
	err := grpc.Invoke(ctx, "/rpc.InterReplica/PushHandler", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InterReplica service

type InterReplicaServer interface {
	PushHandler(context.Context, *PushRequest) (*PushReply, error)
}

func RegisterInterReplicaServer(s *grpc.Server, srv InterReplicaServer) {
	s.RegisterService(&_InterReplica_serviceDesc, srv)
}

func _InterReplica_PushHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterReplicaServer).PushHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.InterReplica/PushHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterReplicaServer).PushHandler(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InterReplica_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.InterReplica",
	HandlerType: (*InterReplicaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushHandler",
			Handler:    _InterReplica_PushHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 114 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x96, 0xe2,
	0x4e, 0xca, 0xc9, 0x4f, 0x2a, 0x86, 0x88, 0x18, 0x39, 0x72, 0xf1, 0x78, 0xe6, 0x95, 0xa4, 0x16,
	0x05, 0xa5, 0x16, 0xe4, 0x64, 0x26, 0x27, 0x0a, 0x19, 0x72, 0x71, 0x07, 0x94, 0x16, 0x67, 0x78,
	0x24, 0xe6, 0xa5, 0xe4, 0xa4, 0x16, 0x09, 0x09, 0xe8, 0x15, 0x15, 0x24, 0xeb, 0x81, 0x44, 0x82,
	0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xa4, 0xf8, 0x90, 0x44, 0x0a, 0x72, 0x2a, 0x95, 0x18, 0x92,
	0xd8, 0xc0, 0x26, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x24, 0x05, 0x1c, 0xdf, 0x6c, 0x00,
	0x00, 0x00,
}
